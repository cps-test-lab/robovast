import osc.helpers
import osc.ros
import osc.nav2
import osc.gazebo
import osc.os

scenario test_scenario:
    timeout(600s)
    robot: differential_drive_robot
    
    spawn_pose: pose_3d = pose_3d(position_3d(x: -8.0m, y: 0.0m), orientation_3d(yaw: 0.0deg))
    goal_pose: pose_3d = pose_3d(position_3d(x: 3.0m, y: 3.0m), orientation_3d(yaw: 0.0deg))
    
    do serial:           
        ros_launch('nav2_bringup', 'tb4_simulation_launch.py', [
                key_value('headless', 'False'),
                key_value('x_pose', spawn_pose.position.x),
                key_value('y_pose', spawn_pose.position.y),
                key_value('yaw', spawn_pose.orientation.yaw)],
                wait_for_shutdown: false
        )
        wait_for_sim(world_name: 'depot')
        ros_launch('gazebo_tf_publisher', 'gazebo_tf_publisher_launch.py', [
                key_value('gz_pose_topic', '/world/depot/dynamic_pose/info'),
                key_value('base_frame_id', 'base_link')],
                wait_for_shutdown: false
        )
        parallel:
            serial:
                log_check(values: ["Detected jump back in time"])
                emit fail
            one_of:
                serial:
                    log_check(values: ["Passing new path to controller"])
                serial:
                    wait elapsed(30s)
                    emit fail
            serial:
                repeat()
                wait elapsed(1s)
                check_process_running("gz")
            serial:
                robot.init_nav2(pose_3d())
                bag_record([
                        '/tf',
                        '/tf_static', 
                        '/scenario_execution/snapshots', 
                        '/map', 
                        '/local_costmap/costmap',
                        '/amcl_pose',
                        '/navigate_to_pose/_action/feedback',
                        '/navigate_to_pose/_action/status'
                    ],
                    hidden_topics: true,
                    use_sim_time: true,
                    timestamp_suffix: false)
                robot.nav_to_pose(goal_pose)
                emit end
