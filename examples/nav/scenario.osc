import osc.helpers
import osc.floorplan_dsl
import osc.ros
import osc.nav2
import osc.os
import osc.x11
import osc.gazebo

scenario nav_scenario:
    timeout(360s)
    
    mesh_file: string
    map_file: string
    start_pose: pose_3d
    goal_poses: list of pose_3d
    laserscan_random_drop_percentage: string = '0.0'
    laserscan_gaussian_noise_std_deviation: string = '0.0'
    static_objects: list of spawn_entity
    floorplan_gen: floorplan_generator
    robot: differential_drive_robot

    do parallel:
        capture_screen(frame_rate: 2.0)

        serial:
            floorplan_gen.generate_gazebo_world("common/world.sdf.xacro", [key_value("mesh_file", os.abspath(common.get_scenario_file_directory() + "/" + mesh_file))])
            ros_launch('', 'common/nav2_launch.py', [
                key_value('world', floorplan_gen.generated_gazebo_world_path),
                key_value('map', os.abspath(common.get_scenario_file_directory() + "/" + map_file)),
                key_value('x_pose', start_pose.position.x),
                key_value('y_pose', start_pose.position.y),
                key_value('yaw', start_pose.orientation.yaw),
                key_value('headless', 'True'),
                key_value('laserscan_gaussian_noise_std_deviation', laserscan_gaussian_noise_std_deviation),
                key_value('laserscan_random_drop_percentage', laserscan_random_drop_percentage)],
                wait_for_shutdown: false)
            wait_for_sim()
            parallel:
                serial:
                    repeat()
                    wait elapsed(1s)
                    check_process_running("gz")
                serial:
                    spawn_multiple(static_objects)
                    robot.init_nav2(start_pose)        
                    bag_record([
                            '/tf',
                            '/tf_static', 
                            '/scenario_execution/snapshots', 
                            '/map', 
                            '/local_costmap/costmap',
                            '/amcl_pose',
                            '/scenario_status',
                            '/gazebo/real_time_factor',
                            '/system/cpu_usage',
                            '/system/memory_usage'
                            # '/navigate_through_poses/_action/feedback',
                            # '/navigate_through_poses/_action/status'
                        ],
                        # hidden_topics: true,
                        use_sim_time: true,
                        timestamp_suffix: false)
                    robot.nav_through_poses(goal_poses)
                    emit end
